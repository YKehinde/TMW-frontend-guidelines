Front-End Dev guidelines
========================

General
=======

1.  Support browsers:
    -   Internet Explorer 7 - 9 (sooon to be 10)
    -   Firefox 3.6 >
    -   Google Chrome 9+
    -   Safari 5
    -   Opera 10

2.  Use feature detection rather than browser sniffing (edge cases such
    as performance are acceptable)

3.  Gracefully degrade functionality when not present (e.g GPS,
    box-shadow, forms etc)

4.  Use font-face for font replacement wherever possible, check font can
    be safely used in ttf format on the web.

HTML Markup
===========

1.  HTML5 doctype
    -   use either Modernizr (http://www.modernizr.com/) (consider
        bloat, build your own) HTML5shiv
        (http://code.google.com/p/html5shiv/) (no feature detection)

2.  microformats where applicable

3.  Try to ensure markup and style stays separate (some style classes
    allowed, e.g imagereplace etc)
    -   only use style only markup if you have to (e.g extra wrapping
        elements), consider :before :after css pseudo elements if styles
        are not 100% necessary

4.  Consider aria integration for high accessibility sites

5.  Indent with either tabs or 4 spaces, keep this continuous throughout
    files where possible

6.  Use html5 form types and inputs
    -   gracefully degrade using Uniform jQuery plugin

Javascript
==========

Style
-----

1.  separate operators/comparators with spacing

        // Good
        if (foo && foo.bar && typeof foo.bar === 'object') {
            foo.bar.call();
        }

        // Bad
        if(foo&&foo.bar&&typeof foo.bar==='object'){
            foo.bar.call();
        }

2.  use braces for logic evaluations, if evaluation execution is simple,
    keep non-braced logic on a single line e.g:

        // Good
        if(i < 10) return true;

        // Good
        if(foo && foo.bar && foo.bar > 10) {
            foo.baz = foo.bar - 100 * 2.7 + 'rad'
        }

        // Bad
        if(foo && foo.bar && foo.bar > 10)
            foo.baz = foo.bar - 100 * 2.7 + 'rad'

        // Bad
        if(i < 10)
            return true;

        // Bad
        if(i < 10)
        {
            return true;
        }

3.  Prefix jQuery collection variables with $ e.g $headerChildren

4.  Use camelCase for variable names where possible

5.  Class declarations start with a capital

6.  Global variables are all caps (keep to minimum)

Code Sensibility
----------------

1.  Always use === as a comparator (unless you really need flexible
    evaluations e.g comparison to null)

2.  Always add a second radix param to parseInt() to prevent accidental
    octal issues

3.  Never bother comparing variables to true/false

4.  Avoid polluting the global namespace

5.  Build using the object literal pattern e.g

        var BASENAME = {
            init: function(){
                this.$sections = $('#container section'),
                this.$additionalTextNodes = $('section a > span')
                this.createMarkup();
            },
            createMarkup: function(){
                var $additionalTextNodes = this.$sections.remove();
                &additionalTextNodes.css({
                    position: 'absolute',
                    top: this.style.left - $sections[0].style.width / 2
                })
            }
        }
        BASENAME.init();

6.  For large loops, either cache the length variable to prevent
    re-evaluation or use a reverse while loop

7.  Don't create functions in loops (its slow, and stupid)

8.  When creating functions with many parameters, pass in an object
    rather than listing numerous parameters.
    -   use $.extend if you are using jquery to extend a passed in
        object while providing defaults

9.  Remap this to self when passing context

10. If possible, avoid using bitwise operations unless they really help.
    If used, document them with comments

        // inverting bits to ease comparison to -1
        if (~foo.bar.indexOf('leetness')){
            alert('w00t!')
        }

jQuery
------

1.  Always cache dom selection if you plan to re-use data

2.  Use efficient query selectors, write for many browsers, don't assume
    document.querySelector()

3.  Avoid using $.each for repeated or performance critical
    functionality, and instead use a for or reverse while loop
    (especially for large objects)

4.  When using simple html5 attribute data, simply use
    $selected.attr('data-foo') unless working with complex data types
    (where you can use $selected.data())

CSS
===

Formatting
----------

1.  Use multi-line css declarations
2.  Group alike parameters within a declaration
3.  Multi-attribute selectors should go on separate lines
4.  Use shorthand when specifying multiple values, remember longhand can
    be shorter for single values.
5.  0 requires no units

        //Good
        a.bar,
        a.foo[href="bar"] {
            position: absolute;
            top: 0;
            right: 0;
            bottom: 0;
            left: 0;

            padding: 10px 0 0 0;
            margin: 10px 0;

            background: red;
            border-radius: 10px;
            -moz-border-radius: 10px;
        }

6.  Use Paul Irish's body/html class conditional for IE* targeting
    http://paulirish.com/2008/conditional-stylesheets-vs-css-hacks-answer-neither/
7.  Use supporting font-size classes, in conjuction with headers to
    avoid restyling header sizes
    http://csswizardry.com/2012/02/pragmatic-practical-font-sizing-in-css/

Libraries and resources
=======================

1.  jQuery (obv!)
2.  Forms:
    -   Uniform

3.  Sencha Touch
4.  jQuery Tools
5.  Ender.js
6.  Use Belated PNG Fix where required:
    http://www.dillerdesign.com/experiment/DD_belatedPNG/
7.  Accessibility Testing: http://wave.webaim.org/
8.  CSS Formatting http://procssor.com/
